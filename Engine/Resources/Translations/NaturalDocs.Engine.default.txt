#
# Natural Docs Default Language File, English (United States)
#
# To create a new language file, copy this one and rename it to replace
# "default" with the locale code in all lowercase, such as
# "NaturalDocs.Engine.en-us.txt".  You can also omit the extension to have it
# apply to all locales in that language, such as "NaturalDocs.Engine.en.txt".
# They inherit from each other, so anything not found in
# NaturalDocs.Engine.en-us.txt will be taken from NaturalDocs.Engine.en.txt,
# and if it's not in there, from NaturalDocs.Engine.default.txt.
#

# This file is part of Natural Docs, which is Copyright © 2003-2024 Code Clear LLC.
# Natural Docs is licensed under version 3 of the GNU Affero General Public License (AGPL)
# Refer to License.txt for the complete details



#
# HTML Generation
#______________________________________________________________________________

HTML.PageTitle(projectTitle): {0} Documentation
HTML.HeaderTitle(projectTitle): {0}
HTML.HeaderSubtitle(projectSubtitle): {0}

HTML.DefaultPageTitle: Source Documentation
HTML.DefaultHeaderTitle: Source Documentation
HTML.DefaultHomeTitle: Source Documentation
HTML.DefaultHomeSubtitleIfTitleExists: Source Documentation

HTML.DefaultSearchText: Search
HTML.SearchingStatus: Searching...
HTML.NoMatchesStatus: No Matches
HTML.MoreResults: More Results...

HTML.AdditionalChildren(number): and {0} other {0s?children:child}

HTML.JavaScriptRequiredNotice: Please enable JavaScript to view this documentation.

HTML.Close: Close

Theme.Light: Light Theme
Theme.Dark: Dark Theme
Theme.Black: Black Theme
Theme.AutoLightDark: Auto Light/Dark
Theme.AutoLightBlack: Auto Light/Black

Menu.Files: Files
Menu.Classes: Classes
Menu.Database: Database
Menu.Modules: Modules
Menu.Packages: Packages

Timestamp.Month1: January
Timestamp.ShortMonth1: Jan
Timestamp.Month2: February
Timestamp.ShortMonth2: Feb
Timestamp.Month3: March
Timestamp.ShortMonth3: Mar
Timestamp.Month4: April
Timestamp.ShortMonth4: Apr
Timestamp.Month5: May
Timestamp.ShortMonth5: May
Timestamp.Month6: June
Timestamp.ShortMonth6: Jun
Timestamp.Month7: July
Timestamp.ShortMonth7: Jul
Timestamp.Month8: August
Timestamp.ShortMonth8: Aug
Timestamp.Month9: September
Timestamp.ShortMonth9: Sep
Timestamp.Month10: October
Timestamp.ShortMonth10: Oct
Timestamp.Month11: November
Timestamp.ShortMonth11: Nov
Timestamp.Month12: December
Timestamp.ShortMonth12: Dec



#
# Javadoc and XML
#______________________________________________________________________________

XML.Heading.example: Example
XML.Heading.exception(count): Exceptions
XML.Heading.param(count): {0s?Parameters:Parameter}
XML.Heading.permission(count): Permissions
XML.Heading.returns: Returns
XML.Heading.seealso(count): See Also
XML.Heading.typeparam(count): Type {0s?Parameters:Parameter}

Javadoc.Heading.author(count): {0s?Authors:Author}
Javadoc.Heading.deprecated: Deprecated
Javadoc.Heading.exception(count): Exceptions
Javadoc.Heading.param(count): {0s?Parameters:Parameter}
Javadoc.Heading.return: Returns
Javadoc.Heading.see(count): See Also
Javadoc.Heading.since(count): Since
Javadoc.Heading.throws(count): Throws
Javadoc.Heading.version(count): Version

Javadoc.Substitution.value: the value
Javadoc.Substitution.value(symbol): the value of {0}



#
# Errors
#______________________________________________________________________________

Error.NoFileSourcesDefined: You did not define any file sources.
Error.FolderDoesntExist(type, name): The {0} folder {1} doesn't exist.
Error.SourceFolderIsIgnored(sourceFolder): The source folder {0} wouldn't be used because it matches a filter, output folder, or configuration folder.

Error.NoProjectConfigFolder: You did not define a project configuration folder.
Error.ProjectConfigFolderDoesntExist(name): The project configuration folder {0} doesn't exist.
Error.CantCreateWorkingDataFolder(name, exception): Could not create working data folder {0}.  {1}
Error.ProjectConfigFolderCannotEqualSystemConfigFolder: The project configuration folder cannot be the same as Natural Docs' configuration folder.
Error.TabWidthMustBeANumber: The tab width must be a number.
Error.TabWidthMustBeGreaterThanZero: The tab width must be greater than zero.

Error.CantOpenHomePageFile(file): Could not open home page file {0}.
Error.HomePageIsntASourceFileOrHTML(file): The home page must be set to a HTML file or a source file.
Error.HomePageSourceFileIsntInSourceFolders(file): The home page file {0} isn't included in Natural Docs' source folders.
Error.HomePageSourceFileIsIgnored(file): The home page file {0} can't be used because it matches a filter or is in an output folder or configuration folder.
Error.HomePageSourceFileDoesntHaveContent(file): The home page file {0} doesn't contain any documentation.

Error.CouldNotWriteToDataFile(name, exception): Could not write to data file {0}.  {1}
Error.NoInputTargets: There were no input targets in Project.txt or the command line.
Error.NoOutputTargets: There were no output targets in Project.txt or the command line.

Error.CouldNotCreateOutputFolder(name, exception): Could not create output folder {0}.  {1}
Error.CouldNotCreateOutputFile(name, exception): Could not create output file {0}.  {1}

CrashReport.Message: Crash Message
CrashReport.CausedBy: Caused By
CrashReport.StackTrace: Stack Trace
CrashReport.Task: Task
CrashReport.Query: Query
CrashReport.Values: Values
CrashReport.GeneratedOn(date): Generated on {0}
CrashReport.Versions: Versions
CrashReport.CommandLine: Command Line

CrashReport.OutdatedMono(currentVersion, minimumVersion): You appear to be using Mono {0}, which is very outdated.  This has been known to cause Natural Docs to crash.  Please update it to version {1} or higher.

Thread.ParentThread: Parent Thread
Thread.ThreadPoolThread: Thread Pool Member
Thread.UnnamedThread: Unnamed Thread



#
# General Configuration Files
# _____________________________________________________________________________

ConfigFile.DoesNotExist(name): The configuration file {0} does not exist.
ConfigFile.CouldNotOpen(name, exception): Could not open configuration file {0}.  {1}
ConfigFile.CouldNotWriteTo(name, exception): Could not write to configuration file {0}.  {1}
ConfigFile.LineNotInIdentifierValueFormat: Lines must be in [name]: [value] format.
ConfigFile.NotAValidIdentifier(identifier): {0} is not a valid identifier.
ConfigFile.NotAValidValue(value): {0} is not a valid value.
ConfigFile.DidntStartWithFormat(name): The first line in configuration file {0} must be the Format line.
ConfigFile.FormatNotAValidVersionString(versionString): "{0}" is not a valid value for the Format line.
ConfigFile.RequiredIdentifierNotDefined(identifier): The identifier "{0}" must be defined.
ConfigFile.RequiredIdentifiersNotDefined(identifiers): The following identifiers must be defined: {0}.

ConfigFile.ErrorPrefix: ERROR:
ConfigFile.ErrorInThisFile: There is an error in this file.  Search for ERROR to find it.
ConfigFile.ErrorsInThisFile(count): There are {0} errors in this file.  Search for ERROR to find them.
ConfigFile.ErrorsInThisFileRegex: ^# There (?:is an error|are [0-9]+ errors) in this file\.  Search for ERROR to find (?:it|them)\.



#
# Project.txt
# _____________________________________________________________________________


Project.txt.SourceFolderDoesNotExist(folder): The source folder {0} does not exist.
Project.txt.IgnoredSourceFolderDoesNotExist(folder): The ignored source folder {0} does not exist.
Project.txt.ImageFolderDoesNotExist(folder): The image folder {0} does not exist.
Project.txt.OutputFolderDoesNotExist(folder): The output folder {0} does not exist.
Project.txt.EncodingFolderDoesNotExist(folder): The source folder {0} does not exist.
Project.txt.EncodingNameDoesNotExist(name): The encoding name "{0}" does not exist or is not supported on this system.  Run Natural Docs with --list-encodings to see all supported encoding names.
Project.txt.EncodingCodePageDoesNotExist(codePage): The encoding code page {0} does not exist or is not supported on this system.  Run Natural Docs with --list-encodings to see all supported encoding code pages.
Project.txt.EncodingFolderNotPartOfSourceFolder: Encoding statements can only have folders when they are part of Source Folder sections.
Project.txt.EncodingFolderNotPartOfSourceFolder(ruleFolder, sourceFolder): The encoding folder {0} is not part of source folder {1}.
Project.txt.FolderNumberMustBeGreaterThanZero: Folders must have a number greater than zero.
Project.txt.NameOnlyAppliesToSourceFolders: The Name property only applies to source folders.
Project.txt.StyleOnlyAppliesToHTMLOutputFolders: The Style property only applies to HTML output folders.
Project.txt.UnrecognizedValue(keyword, value): "{1}" is not a valid value for {0}.
Project.txt.CantFindHomePageFile(name): Can't find home page file {0}.

Project.txt.FileHeader.multiline {{{
# This is the main file you use to configure Natural Docs for your project.
}}}

Project.txt.ProjectInfoHeader.multiline {{{
# Project Information
# ------------------------------------------------------------------------
}}}

Project.txt.ProjectInfoHeaderText.multiline {{{
# This is where you put general information about your project.  None of these
# settings are required, though Title is recommended.
}}}

Project.txt.TitleSyntax.multiline {{{
# Title: [text]
#    The name of your project.  (R) and (TM) will be converted to their
#    respective symbols.
}}}
Project.txt.SubtitleSyntax.multiline {{{
# Subtitle: [text]
#    A subtitle for your project, if desired.
}}}
Project.txt.CopyrightSyntax.multiline {{{
# Copyright: [text]
#    The copyright notice for your project.  (C) will be converted to the
#    copyright symbol.
}}}
Project.txt.TimestampSyntax.multiline {{{
# Timestamp: [text]
#    Text explaining when the documentation was generated, such as "Last
#    Updated Month Day Year", if you want that to be included.  The following
#    substitutions are performed:
}}}
Project.txt.TimestampSubstitutions.multiline {{{
#    m     - Single digit month, when possible.  January is "1".
#    mm    - Always double digit month.  January is "01".
#    mon   - Short month word.  January is "Jan".
#    month - Long month word.  January is "January".
#    d     - Single digit day, when possible.  1 is "1".
#    dd    - Always double digit day.  1 is "01".
#    day   - Day with text extension.  1 is "1st".
#    yy    - Double digit year.  2022 is "22".
#    yyyy  - Four digit year.  2022 is "2022".
#    year  - Four digit year.  2022 is "2022".
}}}
Project.txt.StyleSyntax.multiline {{{
# Style: [style]
#    A custom style to apply to the generated documentation.  See
#    https://naturaldocs.org/reference/styles for more information.
}}}
Project.txt.HomePageSyntax.multiline {{{
# Home Page: [file]
#    A custom home page for the generated documentation.  It could be a
#    documented file in one of the source folders or a HTML file in any
#    location.
}}}
Project.txt.EncodingSyntax.multiline {{{
# Encoding: [name or code page number]
# Encoding: [name or code page number] *.[extension]
#    The character encoding source files use if it is something other than
#    Unicode.  It can be specified as a name such as "iso-8859-1" or a code
#    page number such as "28591".  You can see the list of encodings your
#    system supports by running Natural Docs with the --list-encodings command
#    line option.
#
#    Natural Docs defaults to Unicode which will handle all forms of UTF-8,
#    UTF-16, and UTF-32.  You can set a new default for all files or you can
#    limit it to an extension such as "*.txt".  You can use multiple Encoding
#    lines to cover all the extensions that need them.
#
#    You can also set encodings for specific folders by adding Encoding lines
#    in Source Folder sections.
}}}

Project.txt.SourceHeader.multiline {{{
# Source Code
# ------------------------------------------------------------------------
}}}

Project.txt.SourceHeaderText.multiline {{{
# This is where you tell Natural Docs which folders it should scan for source
# files.  If you add any on the command line this section is ignored except
# for the properties of the ones from the command line.
}}}

Project.txt.SourceFolderSyntax.multiline {{{
# Source Folder: [folder]
#    Specifies a folder which will be searched for source files.  The path is
#    relative to the project configuration folder, which lets this file remain
#    portable across computers and not cause problems in version control
#    systems.  You can enter an absolute path and it will be converted
#    automatically.
#
#    Additional properties can be added after each source folder:
#
#    Name: [name]
#       How this source folder will appear in the menu if you have more than
#       one.
#
#    Encoding: [name or code page number]
#    Encoding: [name or code page number] *.[extension]
#    Encoding: [name or code page number] [folder]
#    Encoding: [name or code page number] [folder]\*.[extension]
#       The character encoding source files use if it's something other than
#       Unicode.  It can be specified as a name such as "iso-8859-1" or a code
#       page number such as "28591".  You can see the list of encodings your
#       system supports by running Natural Docs with the --list-encodings
#       command line option.
#
#       Natural Docs defaults to Unicode which will handle all forms of UTF-8,
#       UTF-16, and UTF-32.  You can set a new default for all files in this
#       folder, limit it to an extension such as "*.txt", limit it to a
#       subfolder, or limit it to extensions in a subfolder.  You can use
#       multiple Encoding lines to cover all the subfolders and extensions
#       that need them.
}}}

Project.txt.FilterHeader.multiline {{{
# Source Filtering
# ------------------------------------------------------------------------
}}}

Project.txt.FilterHeaderText.multiline {{{
# If there are any subfolders in the source code that you would like Natural
# Docs to ignore they can be added here.  If you use any of these options on
# the command line this section is ignored.
}}}

Project.txt.IgnoreSourceFolderSyntax.multiline {{{
# Ignore Source Folder: [folder]
#    Tells Natural Docs to skip this folder when scanning files.
}}}

Project.txt.IgnoreSourceFolderPatternSyntax.multiline {{{
# Ignore Source Folder Pattern: [pattern]
#    Tells Natural Docs to skip all folder names which match this pattern when
#    scanning files.  ? matches a single character, * matches zero or more
#    characters.  It applies to the entire folder name, so "cli" will not
#    match "client", although "cli*" will.
#
#    The data folders of common version control systems (.git, .svn, .cvs, .hg)
#    are ignored automatically.  You don't have to add them here.
}}}

Project.txt.ImageHeader.multiline {{{
# Images
# ------------------------------------------------------------------------
}}}

Project.txt.ImageHeaderText.multiline {{{
# This is where you tell Natural Docs which folders it should look for images
# in.  When you put something like (see diagram.jpg) in a comment Natural Docs
# will look for it relative to the source file it appears in plus any folders
# added here.  If you add any on the command line this section is ignored.
}}}

Project.txt.ImageFolderSyntax.multiline {{{
# Image Folder: [folder]
#    Specifies a folder which will be searched for image files.  The path is
#    relative to the project configuration folder, which lets this file remain
#    portable across computers and not cause problems in version control
#    systems.  You can enter absolute paths and they will be converted
#    automatically.

}}}

Project.txt.OutputHeader.multiline {{{
# Generated Documentation
# ------------------------------------------------------------------------
}}}

Project.txt.OutputHeaderText.multiline {{{
# This is where you tell Natural Docs what kind of documentation you want
# built and where it should be put.  If you use any of these options on the
# command line this section is ignored except for the properties of the ones
# from the command line.
}}}

Project.txt.HTMLOutputFoldersSyntax.multiline {{{
# HTML Output Folder: [folder]
#    Generates HTML documentation in the specified folder.  The path is
#    relative to the project configuration folder, which lets this file remain
#    portable across computers and not cause problems in version control
#    systems.  You can enter an absolute path and it will be converted
#    automatically.
#
#    Additional properties can be added after each output folder:
#
#    Title: [text]
#    Subtitle: [text]
#    Copyright: [text]
#    Timestamp: [text]
#    Style: [style]
#    Home Page: [file]
#       These properties can be overridden for just this output folder, which
#       allows you to have multiple output folders with different styles or
#       titles.  See the Project Information section for descriptions of them.
}}}

Project.txt.GlobalSettingsHeader.multiline {{{
# Global Settings
# ------------------------------------------------------------------------
}}}

Project.txt.GlobalSettingsHeaderText.multiline {{{
# Other settings that apply to your entire project.  Settings specified on the
# command line override the settings here.
}}}

Project.txt.TabWidthSyntax.multiline {{{
# Tab Width: [width]
#    The number of spaces tabs should be expanded to.
}}}

Project.txt.DocumentedOnlySyntax.multiline {{{
# Documented Only: [yes|no]
#    Whether only documented code elements should appear in the output.
#    Defaults to no.
}}}

Project.txt.DocumentPrivatesSyntax.multiline {{{
# Document Privates: [yes|no]
#    Whether only public code elements should appear in the output.
#    Defaults to yes.
}}}

Project.txt.AutoGroupSyntax.multiline {{{
# Auto Group: [yes|no]
#    Whether groups should automatically apply to you code.  Defaults to yes.
}}}



#
# Comments.txt
# _____________________________________________________________________________


Comments.txt.Information.DisplayName: Information
Comments.txt.Information.PluralDisplayName: Information
Comments.txt.Class.DisplayName: Class
Comments.txt.Class.PluralDisplayName: Classes
Comments.txt.Interface.DisplayName: Interface
Comments.txt.Interface.PluralDisplayName: Interfaces
Comments.txt.Struct.DisplayName: Struct
Comments.txt.Struct.PluralDisplayName: Structs
Comments.txt.Section.DisplayName: Section
Comments.txt.Section.PluralDisplayName: Sections
Comments.txt.File.DisplayName: File
Comments.txt.File.PluralDisplayName: Files
Comments.txt.Group.DisplayName: Group
Comments.txt.Group.PluralDisplayName: Groups
Comments.txt.Function.DisplayName: Function
Comments.txt.Function.PluralDisplayName: Functions
Comments.txt.Operator.DisplayName: Operator
Comments.txt.Operator.PluralDisplayName: Operators
Comments.txt.Variable.DisplayName: Variable
Comments.txt.Variable.PluralDisplayName: Variables
Comments.txt.Property.DisplayName: Property
Comments.txt.Property.PluralDisplayName: Properties
Comments.txt.Type.DisplayName: Type
Comments.txt.Type.PluralDisplayName: Types
Comments.txt.Constant.DisplayName: Constant
Comments.txt.Constant.PluralDisplayName: Constants
Comments.txt.Enumeration.DisplayName: Enum
Comments.txt.Enumeration.PluralDisplayName: Enums
Comments.txt.Event.DisplayName: Event
Comments.txt.Event.PluralDisplayName: Events
Comments.txt.Delegate.DisplayName: Delegate
Comments.txt.Delegate.PluralDisplayName: Delegates
Comments.txt.Macro.DisplayName: Macro
Comments.txt.Macro.PluralDisplayName: Macros
Comments.txt.Database.DisplayName: Database
Comments.txt.Database.PluralDisplayName: Databases
Comments.txt.DatabaseTable.DisplayName: Table
Comments.txt.DatabaseTable.PluralDisplayName: Tables
Comments.txt.DatabaseField.DisplayName: Field
Comments.txt.DatabaseField.PluralDisplayName: Fields
Comments.txt.DatabaseView.DisplayName: View
Comments.txt.DatabaseView.PluralDisplayName: Views
Comments.txt.DatabaseIndex.DisplayName: Index
Comments.txt.DatabaseIndex.PluralDisplayName: Indexes
Comments.txt.DatabaseCursor.DisplayName: Cursor
Comments.txt.DatabaseCursor.PluralDisplayName: Cursors
Comments.txt.DatabaseTrigger.DisplayName: Trigger
Comments.txt.DatabaseTrigger.PluralDisplayName: Triggers
Comments.txt.Module.DisplayName: Module
Comments.txt.Module.PluralDisplayName: Modules
Comments.txt.Package.DisplayName: Package
Comments.txt.Package.PluralDisplayName: Packages

Comments.txt.KeywordsCannotContain(char): Keywords cannot contain the {0} character.
Comments.txt.TagsCannotContain(char): Tags cannot contain the {0} character.
Comments.txt.CommentTypeAlreadyExists(name): The comment type "{0}" already exists.  Use Alter Comment Type or choose a different name.
Comments.txt.AlteredCommentTypeDoesntExist(name): The comment type you are trying to alter, "{0}", doesn't exist.
Comments.txt.IndexWithCommentTypeDoesntExist(name): The comment type you are trying to index with, "{0}", doesn't exist.
Comments.txt.NoMoreThanTwoKeywordsOnALine: There cannot be more than two keywords on a line.  The first is singular, the second is plural.
Comments.txt.NoMoreThanOneTagOnALine: There cannot be more than one tag on a line.
Comments.txt.KeywordMustBeInCommentType(keyword): The keyword "{0}" can only be used after a Comment Type or Alter Comment Type keyword.
Comments.txt.UnrecognizedKeyword(keyword): "{0}" is not a valid keyword.
Comments.txt.UnrecognizedValue(keyword, value): "{1}" is not a valid value for {0}.
Comments.txt.UnrecognizedKeywordLanguage(name): "{0}" is not a defined language.
Comments.txt.UnrecognizedHierarchy(name): "{0}" is not a valid hierarchy.
Comments.txt.CannotDefineXWhenYIsDefined(x,y): You cannot define "{0}" if "{1}" is already defined.
Comments.txt.CircularDependencyInIndexWith(list): There is a circular dependency in "Index: with [type]": {0}
Comments.txt.SimpleIdentifierMustOnlyBeASCIILetters(name): The simple identifier "{0}" may only contain the letters A to Z.

CommentTypeFlags.CantCombine(a,b): You cannot set both {0} and {1}.
CommentTypeFlags.CantCombine(a,b,c): You cannot set {0}, {1}, and {2}.
CommentTypeFlags.MustDefineOneOf(a,b): You must set either {0} or {1}.
CommentTypeFlags.MustDefineOneOf(a,b,c): You must set either {0}, {1}, or {2}.
CommentTypeFlags.MustDefineAWithB(a,b): You must set {0} with {1}.
CommentTypeFlags.FlagRequiresScope(flag,scope): {0} requires Scope: {1}.

Comments.txt.SystemHeader.multiline {{{
# This is the main Natural Docs comments file.  If you change anything here,
# it will apply to EVERY PROJECT you use Natural Docs on.  It's recommended
# that you edit the version in your project configuration folder instead.
# This will keep your changes separate so you won't have to reapply them
# whenever you upgrade Natural Docs.
}}}

Comments.txt.ProjectHeader.multiline {{{
# This is the Natural Docs comments file for this project.  If you change
# anything here, it will apply to THIS PROJECT ONLY.  You can edit the version
# in Natural Docs' Config folder to make the changes apply to all projects,
# but it's recommended that you edit this version instead.
}}}

Comments.txt.IgnoredKeywordsHeader.multiline {{{
# Ignored Keywords
# ------------------------------------------------------------------------
}}}

Comments.txt.IgnoredKeywordsReference.multiline {{{
# If you'd like to prevent keywords from being recognized by Natural Docs,
# you can do it like this:
#
# Ignore Keywords:
#    [keyword]
#    [keyword]
#    ...
}}}

Comments.txt.CommentTypesHeader.multiline {{{
# Comment Types
# ------------------------------------------------------------------------
}}}
Comments.txt.DeferredCommentTypesReference.multiline {{{
# The syntax reference is after the definitions.
}}}

Comments.txt.SystemCommentTypesReference.multiline {{{
# Each Natural Docs comment has a corresponding type which determine its
# behavior.  This is how you define them.
#
# Comment Type: [name]
#    Creates a new comment type.
#
# Display Name: [name]
# Plural Display Name: [name]
#    The singular and plural name of the comment type as it should appear in
#    the output.  Defaults to the comment type name.
#
# Display Name from Locale: [identifier]
# Plural Display Name from Locale: [identifier]
#    The identifiers in the current translation file that define the singular
#    and plural names of the comment type as it should appear in the output.
#    If you want to change the name of a comment type in the output, you
#    should remove these properties and use the versions without "from Locale"
#    instead.
#
# Simple Identifier: [name]
#    The name of the comment type using only the letters A to Z.  No spaces,
#    numbers, symbols, or Unicode allowed.  Defaults to the comment type name
#    minus any unacceptable characters.  This is used to generate things like
#    CSS class names.
#
# Scope: [normal|start|end|always global]
#    How the comment affects scope.  Defaults to normal.
#    normal        - The comment stays within the current scope.
#    start         - The comment starts a new scope for all the comments
#                    beneath it, like class comments.
#    end           - The comment resets the scope back to global for all the
#                    comments beneath it, like section comments.
#    always global - The comment is defined as a global symbol, but does not
#                    change the scope for any other comments.
#
# Flags: [flag], [flag], ...
#    A combination of settings that apply to the comment type.
#    Code, File, or Documentation
#        Whether it's used to describe a code element, a file, or is a
#        standalone documentation comment.  Defaults to Code.
#    Variable Type
#        Whether it describes a code element that can be used as a variable's
#        type.
#    Class Hierarchy or Database Hierarchy
#        Whether it describes a code element that should be included in the
#        class or database hierarchy.  Requires Scope: Start.
#    Enum
#        Whether it describes an enum.
#
# Keywords:
#    [keyword]
#    [keyword], [plural keyword]
#    ...
#    A list of the comment type's keywords.  Each line after the heading is
#    the keyword and optionally its plural form for list comments.
#
# [Language] Keywords:
#    [keyword]
#    [keyword], [plural keyword]
#    ...
#    A list of keywords that only apply to the comment type when using a
#    specific programming language.  Each line after the heading is the
#    keyword and optionally its plural form for list comments.
}}}

Comments.txt.ProjectCommentTypesReference.multiline {{{
# Each Natural Docs comment has a corresponding type which determine its
# behavior.  You can define your own here or override the settings of the
# existing ones.
#
# Comment Type: [name]
# Alter Comment Type: [name]
#    Creates a new comment type or changes an existing one.
#
# Display Name: [name]
# Plural Display Name: [name]
#    The singular and plural name of the comment type as it should appear in
#    the output.
#
# Simple Identifier: [name]
#    The name of the comment type using only the letters A to Z.  No spaces,
#    numbers, symbols, or Unicode allowed.  Defaults to the comment type name
#    minus any unacceptable characters.  This is used to generate things like
#    CSS class names.
#
# Scope: [normal|start|end|always global]
#    How the comment affects scope.  Defaults to normal.
#    normal        - The comment stays within the current scope.
#    start         - The comment starts a new scope for all the comments
#                    beneath it, like class comments.
#    end           - The comment resets the scope back to global for all the
#                    comments beneath it, like section comments.
#    always global - The comment is defined as a global symbol, but does not
#                    change the scope for any other comments.
#
# Flags: [flag], [flag], ...
#    A combination of settings that apply to the comment type.
#    Code, File, or Documentation
#        Whether it's used to describe a code element, a file, or is a
#        standalone documentation comment.  Defaults to Code.
#    Variable Type
#        Whether it describes a code element that can be used as a variable's
#        type.
#    Class Hierarchy or Database Hierarchy
#        Whether it describes a code element that should be included in the
#        class or database hierarchy.  Requires Scope: Start.
#    Enum
#        Whether it describes an enum.
#
# Keywords:
#    [keyword]
#    [keyword], [plural keyword]
#    ...
#    A list of the comment type's keywords.  Each line after the heading is
#    the keyword and optionally its plural form for list comments.  You can
#    reuse existing keywords to change their definition.  When using
#    "Alter Comment Type", these keywords are added to the existing ones
#    rather than replacing them.
#
# [Language] Keywords:
#    [keyword]
#    [keyword], [plural keyword]
#    ...
#    A list of keywords that only apply to the comment type when using a
#    specific programming language.  Each line after the heading is the
#    keyword and optionally its plural form for list comments.
}}}




#
# Languages.txt
# _____________________________________________________________________________


Languages.txt.LanguageAlreadyExists(name): The language "{0}" already exists.  Use Alter Language or choose a different name.
Languages.txt.KeywordMustBeInLanguage(keyword): The keyword "{0}" can only be used after a Language or Alter Language keyword.
Languages.txt.UnrecognizedKeyword(keyword): "{0}" is not a valid keyword.
Languages.txt.NeedAddReplaceWhenAlteringLanguage(keyword): You need to use Add {0} or Replace {0} when altering a language.
Languages.txt.BlockCommentsMustHaveAnEvenNumberOfSymbols: Block Comments must have an even number of symbols.
Languages.txt.InvalidEnumValue(value): "{0}" is not a valid Enum Value.
Languages.txt.UnrecognizedValue(keyword, value): "{1}" is not a valid value for {0}.
Languages.txt.AlteredLanguageDoesntExist(name): The language you are trying to alter, "{0}", doesn't exist.
Languages.txt.LanguageAlreadyExists(name): The language "{0}" already exists.  Use Alter Language or choose a different name.
Languages.txt.PrototypeEnderCommentTypeDoesntExist(name): The comment type "{0}" doesn't exist.
Languages.txt.SimpleIdentifierMustOnlyBeASCIILetters(name): The simple identifier "{0}" may only contain the letters A to Z.

Languages.txt.CantDefinePropertyForTextFiles(property, language): You cannot define {0} for {1}.
Languages.txt.CantDefinePropertyForContainers(property, language): You cannot define {0} for {1}.
Languages.txt.CantDefinePropertyForFullLanguageSupport(property, language): You cannot define {0} for {1} because it has full language support.
Languages.txt.CantDefinePropertyForBasicLanguageSupport(property, language): You cannot define {0} for {1} because it has basic language support.


Languages.txt.SystemHeader.multiline {{{
# This is the main Natural Docs languages file.  If you change anything here,
# it will apply to EVERY PROJECT you use Natural Docs on.  It's recommended
# that you edit the version in your project configuration folder instead.
# This will keep your changes separate so you won't have to reapply them
# whenever you upgrade Natural Docs.
}}}

Languages.txt.ProjectHeader.multiline {{{
# This is the Natural Docs languages file for this project.  If you change
# anything here, it will apply to THIS PROJECT ONLY.  You can edit the version
# in Natural Docs' Config folder to make the changes apply to all projects,
# but it's recommended that you edit this version instead.
}}}

Languages.txt.IgnoredExtensionsHeader.multiline {{{
# Ignored Extensions
# ------------------------------------------------------------------------
}}}

Languages.txt.IgnoredExtensionsReference.multiline {{{
# If you'd like to prevent certain file extensions from being scanned by
# Natural Docs, you can do it like this:
#
# Ignore Extensions: [extension] [extension] ...
}}}

Languages.txt.LanguagesHeader.multiline {{{
# Languages
# ------------------------------------------------------------------------
}}}
Languages.txt.DeferredLanguagesReference.multiline {{{
# The syntax reference is after the definitions.
}}}

Languages.txt.SystemLanguagesReference.multiline {{{
# These settings define the languages Natural Docs knows how to parse.  Note
# that all lists are space separated so that commas can be used as values.
#
# Language: [name]
#    Defines a new language.  Its name can use any characters.
#
#    The language Shebang Script is special.  It's entry is only used for
#    extensions, and files with those extensions have their shebang (#!) lines
#    read to determine the real language of the file.  Extensionless files are
#    always treated this way.
#
#    The language Text File is also special.  It's treated as one big comment
#    so you can put Natural Docs content in them without special symbols.
#
# Extensions: [extension] [extension] ...
#    Defines the file extensions of the language's source files.
#
# Shebang Strings: [string] [string] ...
#    Defines a list of strings that can appear in the shebang (#!) line to
#    designate that it's part of the language.
#
# Simple Identifier: [name]
#    The name of the language using only the letters A to Z.  No spaces,
#    numbers, symbols, or Unicode allowed.  Defaults to the language name
#    minus any unacceptable characters.  This is used to generate things like
#    CSS class names.
#
# Aliases: [alias] [alias] ...
#    Defines alternative names for the language that can be used to start a
#    code block.
#
#
# Properties for Basic Language Support Only
# ------------------------------------------------------------------------
# If you're adding your own language to Natural Docs you must define these.
#
# Line Comments: [symbol] [symbol] ...
#    Defines a space-separated list of symbols that are used for line comments,
#    if any.
#
# Block Comments: [opening sym] [closing sym] [opening sym] [closing sym] ...
#    Defines a space-separated list of symbol pairs that are used for block
#    comments, if any.
#
# Member Operator: [symbol]
#    Defines the default member operator symbol.  The default is a dot.
#
# Line Extender: [symbol]
#    Defines the symbol that allows a prototype to span multiple lines if
#    normally a line break would end it.
#
# Enum Values: [global|under type|under parent]
#    Defines how enum values are referenced.  The default is under type.
#    global       - Values are always global, referenced as 'value'.
#    under type   - Values are under the enum type, referenced as
#                   'class.enum.value'.
#    under parent - Values are under the enum's parent, referenced as
#                   'class.value'.
#
# Case Sensitive: [yes|no]
#    Defines whether the language's identifiers are case sensitive.  The
#    default is yes.
#
# Block Comments Nest: [yes|no]
#    Defines whether the language's block comments can nest.  The default is
#    no.
#
# [Comment Type] Prototype Enders: [symbol] [symbol] ...
#    When defined, Natural Docs will attempt to get a prototype from the code
#    immediately following the comment type.  It stops when it reaches one of
#    these symbols.  Use \n for line breaks.
}}}

Languages.txt.ProjectLanguagesReference.multiline {{{
# These settings define the languages Natural Docs knows how to parse.  You
# can define your own here or override the settings of the existing ones.
# Note that all lists are space separated so that commas can be used as
# values.
#
# Language: [name]
# Alter Language: [name]
#    Defines a new language or alters an existing one.  Its name can use any
#    characters.  If any of the properties below have an add/replace form, you
#    must use that when using Alter Language.
#
#    The language Shebang Script is special.  It's entry is only used for
#    extensions, and files with those extensions have their shebang (#!) lines
#    read to determine the real language of the file.  Extensionless files are
#    always treated this way.
#
#    The language Text File is also special.  It's treated as one big comment
#    so you can put Natural Docs content in them without special symbols.
#
# Extensions: [extension] [extension] ...
# [Add/Replace] Extensions: [extension] [extension] ...
#    Defines the file extensions of the language's source files.
#
# Shebang Strings: [string] [string] ...
# [Add/Replace] Shebang Strings: [string] [string] ...
#    Defines a list of strings that can appear in the shebang (#!) line to
#    designate that it's part of the language.
#
# Simple Identifier: [name]
#    The name of the language using only the letters A to Z.  No spaces,
#    numbers, symbols, or Unicode allowed.  Defaults to the language name
#    minus any unacceptable characters.  This is used to generate things like
#    CSS class names.
#
# Aliases: [alias] [alias] ...
# [Add/Replace] Aliases: [alias] [alias] ...
#    Defines alternative names for the language that can be used to start a
#    code block.
#
#
# Properties for Basic Language Support Only
# ------------------------------------------------------------------------
# If you're adding your own language to Natural Docs you must define these.
#
# Line Comments: [symbol] [symbol] ...
#    Defines a space-separated list of symbols that are used for line comments,
#    if any.
#
# Block Comments: [opening sym] [closing sym] [opening sym] [closing sym] ...
#    Defines a space-separated list of symbol pairs that are used for block
#    comments, if any.
#
# Member Operator: [symbol]
#    Defines the default member operator symbol.  The default is a dot.
#
# Line Extender: [symbol]
#    Defines the symbol that allows a prototype to span multiple lines if
#    normally a line break would end it.
#
# Enum Values: [global|under type|under parent]
#    Defines how enum values are referenced.  The default is global.
#    global       - Values are always global, referenced as 'value'.
#    under type   - Values are under the enum type, referenced as
#                   'class.enum.value'.
#    under parent - Values are under the enum's parent, referenced as
#                   'class.value'.
#
# Case Sensitive: [yes|no]
#    Defines whether the language's identifiers are case sensitive.  The
#    default is yes.
#
# Block Comments Nest: [yes|no]
#    Defines whether the language's block comments can nest.  The default is
#    no.
#
# [Comment Type] Prototype Enders: [symbol] [symbol] ...
#    When defined, Natural Docs will attempt to get a prototype from the code
#    immediately following the comment type.  It stops when it reaches one of
#    these symbols.  Use \n for line breaks.
}}}




#
# Style.txt
# _____________________________________________________________________________


Style.txt.CantLinkFileWithExtension(extension): You can only use Link with .css, .js, and .json files.
Style.txt.CantLinkCSSFileToSpecificPageTypes(pageType): You can't link CSS files to only {0} pages, they must be linked to all of them.
Style.txt.CantFindStyle(name): Can't find style {0}.
Style.txt.CantFindInheritedStyle(name): Can't find inherited style {0}.
Style.txt.CantFindLinkedFile(name): Can't find linked file {0}.
Style.txt.LinkedFileMustBeInStyleFolder(name, folder): Linked file {0} must be in the style folder {1}.
Style.txt.HomePageMustHaveHTMLExtension(extension): The home page must have a .html file extension.
Style.txt.CantFindHomePageFile(name): Can't find home page file {0}.
Style.txt.HomePageFileMustBeInStyleFolder(name, folder): Home page file {0} must be in the style folder {1}.
Style.txt.CantUseHomeLinksWithCustomHomePage: Home Link statements won't apply to custom home pages, you must add them to the HTML file yourself.
Style.txt.CantUseHomeOnLoadWithCustomHomePage: Home OnLoad statements won't apply to custom home pages, you must add them to the HTML file yourself.


Style.txt.Header.multiline {{{
# This is a configuration file for a Natural Docs HTML output style.
}}}

Style.txt.InheritanceHeader.multiline {{{
# Inheritance
# ------------------------------------------------------------------------
}}}

Style.txt.InheritanceReference.multiline {{{
# You can inherit the settings of another style like this:
#
# Inherit: [style]
#
# All of its settings will be applied before yours.  You can add this line
# multiple times to inherit more than one style.
#
# If you just want to make some changes to the default style, inherit Default.
# If you're building your own page design from scratch but want to keep the
# default JavaScript functions, inherit DefaultJS.  This will include the code
# but not the CSS or images.
}}}

Style.txt.LinkedFilesHeader.multiline {{{
# Linked Files
# ------------------------------------------------------------------------
}}}

Style.txt.LinkedFilesReference.multiline {{{
# You can link .css, .js, and .json files to the output like this:
#
# Link: [file]
# Frame Link: [file]
# Content Link: [file]
# Home Link: [file]
#
# These files will be added to the generated output via link or script tags.
#
# You can limit JavaScript files to just to the frame page, which handles the
# header, footer, menu, summary, and search, or to content pages, which is the
# documentation in the rightmost panel, or to the home page.  If you do not
# specify a page type they will be linked to every page.  CSS files can only
# be linked to every page.
#
# All files will be copied to the output folder even if you don't link them,
# but they will not be added to the pages automatically.
}}}

Style.txt.OnLoadHeader.multiline {{{
# OnLoad
# ------------------------------------------------------------------------
}}}

Style.txt.OnLoadReference.multiline {{{
# You can add code to the page's OnLoad handler like this:
#
# OnLoad: [statement]
# Frame OnLoad: [statement]
# Content OnLoad: [statement]
# Home OnLoad: [statement]
#
# You can limit it to just to the frame page, which handles the header,
# footer, menu, summary, and search, or to content pages, which is the
# documentation in the rightmost panel, or to the home page.  If you do not
# specify a page type it will be added to every page.
#
# The OnLoad statement is limited to a single line.  If you have a lot of code
# it's recommended that you make it a function in a separate .js file, link
# that file, and then call the function from this statement rather than trying
# to cram it all on this line.
}}}

Style.txt.HomePageHeader.multiline {{{
# Home Page
# ------------------------------------------------------------------------
}}}

Style.txt.HomePageReference.multiline {{{
# You can choose a custom HTML file to serve as the home page for the output
# like this:
#
# Home Page: [file]
#
# It will appear in the content area of the documentation's home page,
# separate from the header and side menu which will both still be visible.
# The file you choose must have a .html extension.
#
# If this is defined, none of the OnLoad or Link properties will have any
# effect on it.  You must add those things directly to the HTML file if
# they're needed.
#
# The HTML file may contain these strings which will be replaced by your
# project information.  They will have entity substitutions made for <, >, &,
# and " characters so they're safe to place directly in the HTML or inside
# double-quoted JavaScript strings.
#
#    %NaturalDocs_Title%
#    %NaturalDocs_Subtitle%
#    %NaturalDocs_Copyright%
#    %NaturalDocs_Timestamp%
}}}
