
Title: SystemVerilog Parser Notes
_______________________________________________________________________________

Topic: ANSI Port Attribute Inheritance Rules

	According to the language reference these are the rules for attribute inheritance.  See Section 6 for the rules
	for data types, and Section 23.2.2.3 for the rules for module ports.


	Definitions:

		--- SV Code ---
		inout wire bit signed [7:0] portName[2]
		---

		- "inout" is the *direction*, which can also be input, output, etc.
			- For parameter ports this would instead be the *parameter keyword* (parameter, localparam)
		- "wire" is the *kind*, which can be tri0, var, etc.
			- It can be any of the *net types* (wire, tri0, etc.) or *var*
			- It can also be a user-defined net type, so you can't rely on a keyword list being exhaustive
		- "bit signed [7:0]" is the *data type*, which can also be reg, int, etc.
			- "signed" is the *signing* and is considered part of the data type
			- "[7:0]" is the *packed dimension* and is considered part of the data type
		- "[2]" is the *unpacked dimension*
			- It can also be a range similar to "[0:3]"


	Directions are Inherited:

		The direction of a port (input, output, inout, etc.) is always inherited if it's not specified.


	Parameter Keywords are Not Inherited:

		A parameter keyword (parameter, localparam) is _not_ inherited.  The behavior of a keywordless parameter
		that follows a localparam appears to be undefined.  In this example:

		--- SystemVerilog ---
		module ParameterKeywords #(
			parameter  paramA = 1,
			           paramB = 2,
			localparam paramC = 3,
			           paramD = 4) ();
		---

		- Aldec Riviera Pro 2023.04 treats paramD as "parameter"
		- Cadence Xcelium 23.09 treats paramD as "localparam"
		- Siemens Questa 2023.3 treats paramD as "parameter"
		- Synopsys VCS 2023.03 treats paramD as "localparam"

		Therefore we won't include it as an inherited property at all.


	Kind and Data Types are Only Inherited Together:

		- If *neither* are specified, they inherit from the previous parameter.
		- If *both* are specified there's nothing that needs to be inherited.
		- If *one* of them is specified the other is the default rather than inherited.

		--- SV Code ---
		module MyModule (
			wire bit signed [7:0] portA,
			                      portB,
			tri0                  portC,
			     reg              portD);
		---

		- portA is "wire bit signed [7:0]" as specified.
		- portB is "wire bit signed [7:0]" as it inherits both things from portA.  The packed dimension "[7:0]" and
		  signing "signed" are part of the type so they inherit as well.
		- portC is "tri0" because the kind is specified.  The type reverts to the default, which should be "logic" but
		  we won't add that.
		- portD is "reg" because the type is specified.  The kind reverts to the default, which depends on what the
		  type is and can be changed with compiler directives so we won't assume what it is.


	Signing and Packed Dimensions Don't Inherit Underlying Data Types:

		If you declare signing and/or packed dimensions without a data type, it uses the default data type rather
		than inheriting it.

		--- SV Code ---
		module MyModule (
			int unsigned [7:0] portA,
			    signed         portB,
			             [3:0] portC);
		---

		- portA is "int unsigned [7:0]" as specified.
		- portB is just "signed" because the type and packed dimensions revert to the default, which can vary based
		  on what the kind is.
		- portC is just "[3:0]" because the type and signing revert to the default, which can vary based on what the kind
		  is.


	Unpacked Dimensions Aren't Inherited:

		Unpacked dimensions are not inherited even if the type otherwise is.

		--- SV Code ---
		module MyModule (
			bit [7:0] portA[2],
			          portB,
			          portC[0:3]);
		---

		- portA is "bit [7:0] portA[2]" as specified
		- portB is "bit [7:0] portB" as it doesn't inherit the "[2]"
		- portC is "bit [7:0] portC[0:3]" as it doesn't inherit the "[2]" and has its own "[0:3]".
