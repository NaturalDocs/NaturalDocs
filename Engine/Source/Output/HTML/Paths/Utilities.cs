/*
 * Class: CodeClear.NaturalDocs.Engine.Output.HTML.Paths.Utilities
 * ____________________________________________________________________________
 *
 * Shared functions for all HTML path classes.
 *
 *
 * Topic: Path Restrictions
 *
 *		These restrictions apply to both output file paths and to hash paths.  The JavaScript must be able to convert a
 *		hash path to a file path easily so they cannot have different restrictions.
 *
 *		- Paths cannot contain the colon character as it would conflict with the URL hash format "#File:[path]:[symbol]".
 *		- Paths cannot contain the hash character.  File paths containing it would truncate the URL trying to load it.
 *		- Paths cannot contain the semicolon or ampersand characters as not all browsers can load files with them in the
 *		  path.
 *		- Paths cannot contain the percent sign as it would conflict with URI encoding.
 *		- Paths cannot contain the question mark character as it will cause IE6 to truncate the hash string.
 *		- While browsers support paths with spaces they are restricted anyway to keep URLs contiguous.
 *		- Output file names cannot contain dots because Apache will try to execute Script.pl.html even though .pl is not
 *		   the last extension.  Dots in folder names and hash paths are okay though.
 */

// This file is part of Natural Docs, which is Copyright © 2003-2025 Code Clear LLC.
// Natural Docs is licensed under version 3 of the GNU Affero General Public License (AGPL)
// Refer to License.txt for the complete details


using System;
using System.Text;


namespace CodeClear.NaturalDocs.Engine.Output.HTML.Paths
	{
	static public class Utilities
		{

		// Group: Functions
		// __________________________________________________________________________


		/* Function: Sanitize
		 * Replaces characters in the path according to the <Path Restrictions>.  This should only be used for parts of the path
		 * generated by user information such as source folders.  You don't want to use this on the final combined path because
		 * it could replace things like the colon that separates hash path sections or the colon that follows the drive letter in
		 * Windows.
		 */
		public static string Sanitize (string input, bool replaceDots = false)
			{
			if (input.IndexOfAny(restrictedPathChars) == -1 && (replaceDots == false || input.IndexOf('.') == -1))
				{  return input;  }
			else
				{
				StringBuilder output = new StringBuilder(input);

				foreach (char restrictedPathChar in restrictedPathChars)
					{
					if (restrictedPathChar != ':')
						{  output.Replace(restrictedPathChar, '_');  }
					else
						{
						output.Replace("::", ".");
						output.Replace(':', '_');
						}
					}

				if (replaceDots)
					{  output.Replace('.', '-');  }

				return output.ToString();
				}
			}



		// Group: Static Functions and Variables
		// __________________________________________________________________________

		/* var: restrictedPathChars
		 * An array of characters that cannot appear in paths according to the <Path Restrictions>.
		 */
		public static char[] restrictedPathChars = { ':', '#', '?', ';', '&', '%', ' ' };

		}
	}
